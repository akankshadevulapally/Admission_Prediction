# -*- coding: utf-8 -*-
"""MLR_PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H6lMMpvbQWf-Ib1tQ7ihgUBxxYo5rZ33

## Importing the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""## Importing the dataset"""

df=pd.read_csv('Admission_Predict_Ver1.1.csv');
print(df);

"""## Checking for missing values"""

df.isna().sum()

"""## Extracting x and y from the dataset"""

x=df.iloc[:,1:-1].values
y=df.iloc[:,-1].values
x1=x;

"""## Feature scaling of input"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x = sc.fit_transform(x)

"""## Applying Principal component analysis to reduce dimensions"""

from sklearn.decomposition import PCA
pca=PCA(n_components=2)
x=pca.fit_transform(x)
var=pca.explained_variance_ratio_
print(var)
# Among all the eighen values the first two contribute 77% of the variance so n_components=2

"""## Splitting the dataset into trainset and testset"""

from sklearn.model_selection import train_test_split
x_tr,x_te,y_tr,y_te  = train_test_split(x,y,train_size = 0.8,random_state=131)

"""## Training the Linear regression model"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_tr,y_tr)

"""## Predicting the output"""

y_pred = regressor.predict(x_te)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
mae = mean_absolute_error(y_te,y_pred)
mse = mean_squared_error(y_te,y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_te,y_pred)
print("Mean absolute error:",mae)
print("Mean squared error:",mse)
print("Root mean squared error:",rmse)
print("R2_score:",r2)

"""## Plot after using pca to reduce the dimensions."""

plt.scatter(x_te[:,0],y_te,color='red')
plt.plot(x_te[:,0],y_pred,color='blue')
plt.title('Test Output')
plt.xlabel('Gre Score(scaled version)')
plt.ylabel('chance of admit')
plt.show()

"""## Extracting original GRE score for the test data"""

gre=[]
for i in range(y_te.size):
    for j in range(y.size):
        if(y_te[i]==y[j]):
            gre.append(x1[j][0])
            break;

"""## Plot of original GRE score vs chance of admit"""

plt.scatter(gre,y_te,color='red')
plt.plot(gre,y_pred,color='blue')
plt.title('Test Output')
plt.xlabel('GRE Score(Not scaled)')
plt.ylabel('chance of admit')
plt.show()

"""##  Scatter Plot of original GRE score vs chance of admit"""

plt.scatter(gre,y_te,color='red')
plt.scatter(gre,y_pred,color='blue')
plt.title('Test Output')
plt.xlabel('GRE Score')
plt.ylabel('chance of admit')
plt.show()

"""## Testing for last 100 points in the dataset"""

x_own=x1[400:500,0]
y_own=y[400:500]
x_own_pca=x[400:500]
y_own_pred = regressor.predict(x_own_pca)

plt.scatter(x_own,y_own,color='red')
plt.plot(x_own,y_own_pred,color='blue')
plt.title('Test Output')
plt.xlabel('GRE Score')
plt.ylabel('chance of admit')
plt.show()